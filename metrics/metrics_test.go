// Code generated by go2go; DO NOT EDIT.


//line metrics_test.go2:1
package metrics

//line metrics_test.go2:1
import (
//line metrics_test.go2:1
 "sync"
//line metrics_test.go2:1
 "testing"
//line metrics_test.go2:1
)

//line metrics_test.go2:5
func TestMetric1(t *testing.T) {
	m := instantiate୦୦Metric1୦int{}

	m.Add(1)
	m.Add(2)
}

func TestMetric2(t *testing.T) {
	m := instantiate୦୦Metric2୦int୦string{}

	m.Add(1, "1")
	m.Add(2, "2")
}

func TestMetric3(t *testing.T) {
	m := instantiate୦୦Metric3୦int୦string୦float64{}

	m.Add(1, "1", 1.0)
	m.Add(2, "2", 2.0)
}

//line metrics_test.go2:24
type instantiate୦୦Metric1୦int struct {
//line metrics.go2:9
 mu sync.Mutex
			m  map[int]int
}

//line metrics.go2:14
func (m *instantiate୦୦Metric1୦int,) Add(v int,

//line metrics.go2:14
) {
	m.mu.Lock()
	defer m.mu.Unlock()
	if m.m == nil {
		m.m = make(map[int]int)
	}
	m.m[v]++
}

//line metrics.go2:21
type instantiate୦୦Metric2୦int୦string struct {
//line metrics.go2:31
 mu sync.Mutex
	m map[instantiate୦୦pair୦int୦string]int
}

//line metrics.go2:36
func (m *instantiate୦୦Metric2୦int୦string,) Add(v1 int,

//line metrics.go2:36
 v2 string,

//line metrics.go2:36
) {
	m.mu.Lock()
	defer m.mu.Unlock()
	if m.m == nil {
		m.m = make(map[instantiate୦୦pair୦int୦string]int)
	}
	m.m[instantiate୦୦pair୦int୦string{v1, v2}]++
}

//line metrics.go2:43
type instantiate୦୦Metric3୦int୦string୦float64 struct {
//line metrics.go2:54
 mu sync.Mutex
	m map[instantiate୦୦key3୦int୦string୦float64]int
}

//line metrics.go2:59
func (m *instantiate୦୦Metric3୦int୦string୦float64,) Add(v1 int,

//line metrics.go2:59
 v2 string,

//line metrics.go2:59
 v3 float64,

//line metrics.go2:59
) {
	m.mu.Lock()
	defer m.mu.Unlock()
	if m.m == nil {
		m.m = make(map[instantiate୦୦key3୦int୦string୦float64]int)
	}
	m.m[instantiate୦୦key3୦int୦string୦float64{v1, v2, v3}]++
}

//line metrics.go2:66
type instantiate୦୦pair୦int୦string struct {
//line metrics.go2:25
 f1 int

//line metrics.go2:26
 f2 string
}
//line metrics.go2:27
type instantiate୦୦key3୦int୦string୦float64 struct {
//line metrics.go2:47
 f1 int

//line metrics.go2:48
 f2 string

//line metrics.go2:49
 f3 float64
}
//line metrics.go2:50
type _ sync.Cond

//line metrics.go2:50
var _ = testing.AllocsPerRun
