// Code generated by go2go; DO NOT EDIT.


//line stack_test.go2:1
package stack

//line stack_test.go2:1
import "testing"

//line stack_test.go2:7
func TestStack(t *testing.T) {
	var s instantiate୦୦Stack୦string
	s.Push("hi")
	s.Push("bye")
	if s.IsEmpty() {
		t.Fatalf("unexpected IsEmpty")
	}
	if s.Len() != 2 {
		panic("bad Len")
	}
	if v, ok := s.Pop(); !ok || v != "bye" {
		t.Fatalf("bad Pop 1")
	}
	if v, ok := s.Pop(); !ok || v != "hi" {
		t.Fatalf("bad Pop 2")
	}
	if !s.IsEmpty() {
		t.Fatalf("expected IsEmpty")
	}
	if s.Len() != 0 {
		t.Fatalf("bad Len 2")
	}
}

//line stack_test.go2:29
type instantiate୦୦Stack୦string []string

//line stack.go2:5
func (s *instantiate୦୦Stack୦string,) Push(e string) {
	*s = append(*s, e)
}

func (s *instantiate୦୦Stack୦string,) Pop() (string,
//line stack.go2:9
 bool) {
	l := len(*s)
	if l == 0 {
				var zero string

//line stack.go2:13
  return zero, false
	}
	r := (*s)[l-1]
	*s = (*s)[:l-1]
	return r, true
}

func (s *instantiate୦୦Stack୦string,) IsEmpty() bool {
	return len(*s) == 0
}

func (s *instantiate୦୦Stack୦string,) Len() int {
	return len(*s)
}

//line stack.go2:26
var _ = testing.AllocsPerRun
