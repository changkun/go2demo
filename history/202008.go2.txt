// Copyright 2020 Changkun Ou. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package history

// type parameters

type Ordered interface {
	type int, int8, int16, int32, int64,
		uint, uint8, uint16, uint32, uint64, uintptr,
		float32, float64,
		string
}

// Max returns the maximum among all parameters
func Max[type T Ordered](v0 T, vn ...T) T {
	switch l := len(vn); {
	case l == 0:
		return v0
	case l == 1:
		if v0 > vn[0] { return v0 }
		return vn[0]
	default:
		vv := Max(vn[0], vn[1:]...)
		if v0 > vv { return v0 }
		return vv
	}
}

// a more complex example:

type I1 [type P1] interface {
    m1(x P1)
}
type I2 [type P1, P2] interface {
    m2(x P1) P2
    type int, float64
}

func F[type P1 I1[P1], P2 I2[P1, P2]] (x P1, y P2) {}